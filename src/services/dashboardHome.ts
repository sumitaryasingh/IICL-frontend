import axios from "axios";

export interface Course {
  id?: string; // optional if generated by the database
  name: string;
}

// Add a new course
export const addCourse = async (course: Course): Promise<Course> => {
  try {
    const response = await axios.post<Course>("/api/course/add-course", course);
    return response.data;
  } catch (error: any) {
    console.error("Error adding course:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "Failed to add course.");
  }
};

// Get list of courses
export const getCourses = async (): Promise<Course[]> => {
  try {
    const response = await axios.get<Course[]>("/api/course/get-course");
    return response.data;
  } catch (error: any) {
    console.error("Error fetching courses:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "Failed to fetch courses.");
  }
};

// Update an existing course
export const updateCourse = async (courseId: string, course: Course): Promise<Course> => {
  try {
    const response = await axios.put<Course>(`/api/course/${courseId}`, course);
    return response.data;
  } catch (error: any) {
    console.error("Error updating course:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "Failed to update course.");
  }
};

// Delete a course
export const deleteCourse = async (courseId: string): Promise<{ message: string }> => {
  try {
    const response = await axios.delete<{ message: string }>(`/api/course/delete-course/${courseId}`);
    return response.data;
  } catch (error: any) {
    console.error("Error deleting course:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "Failed to delete course.");
  }
};
